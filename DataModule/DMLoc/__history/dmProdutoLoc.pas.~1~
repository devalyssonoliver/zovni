unit dmProdutoLoc;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Gerenciador;

type
  TModoBusca = (mdCodigo, mdNome);
  TDataModule1 = class(TDataModule)
    fdqryProdutoLoc: TFDQuery;
  private
    { Private declarations }
  public
    { Public declarations }
  procedure Buscar(Campo : Variant;Modo: TModoBusca);
   procedure Excluir;
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule1 }

procedure TDataModule1.Buscar(Campo: Variant; Modo: TModoBusca);
begin
  fdqryProdutoLoc.Close;
  fdqryProdutoLoc.SQL.Text := 'SELECT * FROM clientes WHERE ';

  case Modo of
    mdCodigo:
      begin
        fdqryProdutoLoc.SQL.Text := fdqryProdutoLoc.SQL.Text + 'id = :id';
        fdqryProdutoLoc.Params.ParamByName('id').Value := Campo;
      end;
    mdNome:
      begin
        fdqryProdutoLoc.SQL.Text := fdqryProdutoLoc.SQL.Text + 'nome ILIKE :nome';
        fdqryProdutoLoc.Params.ParamByName('nome').Value := '%' + Campo + '%';
      end;
  end;

  fdqryProdutoLoc.Open;
end;

procedure TDataModule1.Excluir;
begin
  if not fdqryProdutoLoc.IsEmpty then
  begin
    fdqryProdutoLoc.Delete;
  end;
end;

end.
