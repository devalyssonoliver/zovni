unit dmUsuario;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Gerenciador;

type
  TDataModule1 = class(TDataModule)
    fdqryUsuarios: TFDQuery;
  private
    { Private declarations }
  public
    { Public declarations }
    procedure Salvar;
    procedure Editar;
    function VerificarLogin(Login, Senha : string): Boolean;
    procedure Cancelar;
    procedure Inserir;
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TDataModule1 }

procedure TDataModule1.Cancelar;
begin
  if (fdqryUsuarios.State in [dsInsert, dsEdit]) then
  begin
    fdqryUsuarios.Cancel;
  end;

end;

procedure TDataModule1.Editar;
begin
   fdqryUsuarios.Edit;
end;

procedure TDataModule1.Inserir;
begin
  if not (fdqryUsuarios.State in [dsInsert, dsEdit]) then
  begin
    fdqryUsuarios.Insert;
  end;

end;

procedure TDataModule1.Salvar;
begin
   if (fdqryUsuarios.state in [dsInsert, dsEdit]) then
   begin
     fdqryUsuarios.Post;
   end;

end;

function TDataModule1.VerificarLogin(Login, Senha : string): Boolean;
begin
  Result := False;
  fdqryUsuarios.Close;
  fdqryUsuarios.SQL.Text :=
    'SELECT login FROM usuarios WHERE login = :login AND senha = crypt(:senha, senha)';
  fdqryUsuarios.Params.ParamByName('login').AsString := Login;
  fdqryUsuarios.Params.ParamByName('senha').AsString := Senha;
  fdqryUsuarios.Open;

  Result := not fdqryUsuarios.IsEmpty;
end;

end.
